(()=>{"use strict";const t=()=>Array(9).fill(null).map(()=>Array(9).fill(0)),e=(t,e,o,r)=>{for(let l=0;l<9;l++)if(t[e][l]===r)return!1;for(let l=0;l<9;l++)if(t[l][o]===r)return!1;const s=e-e%3,n=o-o%3;for(let l=0;l<3;l++)for(let e=0;e<3;e++)if(t[l+s][e+n]===r)return!1;return!0},o=function(t){let o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2e3;const s=[],n=t=>{if(!(s.length>=o)){for(let o=0;o<9;o++)for(let r=0;r<9;r++)if(0===t[o][r]){for(let s=1;s<=9;s++)e(t,o,r,s)&&(t[o][r]=s,n(t),t[o][r]=0);return}s.push(JSON.parse(JSON.stringify(t)))}};return n(JSON.parse(JSON.stringify(t))),r(s)},r=t=>{for(let e=t.length-1;e>0;e--){const o=Math.floor(Math.random()*(e+1));[t[e],t[o]]=[t[o],t[e]]}return t},s=t=>{for(let o=0;o<81;o++){const n=Math.floor(o/9),l=o%9;if(0===t[n][l]){const o=r([1,2,3,4,5,6,7,8,9]);for(const r of o)if(e(t,n,l,r)){if(t[n][l]=r,s(t))return!0;t[n][l]=0}return!1}}return!0},n=e=>{let n=null,l=-1,f=0;for(;f<10;){const i=t();s(i);const a=JSON.parse(JSON.stringify(i));let u=JSON.parse(JSON.stringify(a));const c=r(Array.from({length:81},(t,e)=>e));let p=0;for(const t of c){if(p>=e)break;const r=Math.floor(t/9),s=t%9;if(0===u[r][s])continue;const n=u[r][s];u[r][s]=0;1!==o(u,2).length?u[r][s]=n:p++}if(p>=e)return{puzzle:u,solution:a};p>l&&(l=p,n={puzzle:u,solution:a}),f++}return l<e&&console.warn("Maximum number of attempts reached (".concat(10,"). Target was ").concat(e," cells, best result is a puzzle with ").concat(l," cells removed.")),n};function l(t){const e=Math.floor(t/6e4),o=Math.floor(t%6e4/1e3);return"".concat(e,"m ").concat(o,"s")}self.onmessage=t=>{const{totalSudokus:e,chosenDifficulties:o,difficultySettings:r}=t.data,s=[],f=o.length,i=Math.floor(e/f),a=e%f;let u=o.map((t,e)=>i+(e<a?1:0)),c=u.reduce((t,e,s)=>{const n=o[s];return t+e*r[n].estimatedTime},0);self.postMessage({type:"progress",generated:0,total:e,estimatedTime:l(c)});for(let p=0;p<o.length;p++){const t=o[p],f=r[t];for(let o=0;o<u[p];o++){const t=n(f.removals);t&&s.push({puzzle:t.puzzle,solution:t.solution,difficulty:f.level}),c-=f.estimatedTime,self.postMessage({type:"progress",generated:s.length,total:e,estimatedTime:l(c)})}}self.postMessage({type:"result",puzzles:s})}})();
//# sourceMappingURL=400.8a892a75.chunk.js.map