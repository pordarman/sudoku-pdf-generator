(()=>{"use strict";const t=()=>Array(9).fill(null).map(()=>Array(9).fill(0)),e=(t,e,o,s)=>{for(let l=0;l<9;l++)if(t[e][l]===s)return!1;for(let l=0;l<9;l++)if(t[l][o]===s)return!1;const n=e-e%3,r=o-o%3;for(let l=0;l<3;l++)for(let e=0;e<3;e++)if(t[l+n][e+r]===s)return!1;return!0},o=function(t){let o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2e3;const n=[],r=t=>{if(!(n.length>=o)){for(let o=0;o<9;o++)for(let s=0;s<9;s++)if(0===t[o][s]){for(let n=1;n<=9;n++)e(t,o,s,n)&&(t[o][s]=n,r(t),t[o][s]=0);return}n.push(JSON.parse(JSON.stringify(t)))}};return r(JSON.parse(JSON.stringify(t))),s(n)},s=t=>{for(let e=t.length-1;e>0;e--){const o=Math.floor(Math.random()*(e+1));[t[e],t[o]]=[t[o],t[e]]}return t},n=t=>{for(let o=0;o<81;o++){const r=Math.floor(o/9),l=o%9;if(0===t[r][l]){const o=s([1,2,3,4,5,6,7,8,9]);for(const s of o)if(e(t,r,l,s)){if(t[r][l]=s,n(t))return!0;t[r][l]=0}return!1}}return!0},r=e=>{let r=null,l=-1,i=0;for(;i<30;){const f=t();n(f);const c=JSON.parse(JSON.stringify(f));let u=JSON.parse(JSON.stringify(c));const a=s(Array.from({length:81},(t,e)=>e));let g=0;for(const t of a){if(g>=e)break;const s=Math.floor(t/9),n=t%9;if(0===u[s][n])continue;const r=u[s][n];u[s][n]=0;1!==o(u,2).length?u[s][n]=r:g++}if(g>=e)return{puzzle:u,solution:c};g>l&&(l=g,r={puzzle:u,solution:c}),i++}return l<e&&console.warn("Maximum number of attempts reached (".concat(30,"). Target was ").concat(e," cells, best result is a puzzle with ").concat(l," cells removed.")),r};function l(t){const e=Math.floor(t/6e4),o=Math.floor(t%6e4/1e3);return"".concat(e,"m ").concat(o,"s")}self.onmessage=t=>{const{totalSudokus:e,chosenDifficulties:o,difficultySettings:s,isCustomMode:n}=t.data;let i=0;const f=[],c=[];if(n)o.forEach(t=>{if(t.count>0){const e=s[t.difficulty];f.push({difficultyKey:t.difficulty,count:t.count,settings:e}),i+=t.count*e.estimatedTime}});else{const t=o.length,n=Math.floor(e/t),r=e%t;o.forEach((t,e)=>{const o=n+(e<r?1:0),l=s[t];f.push({difficultyKey:t,count:o,settings:l}),i+=o*l.estimatedTime})}self.postMessage({type:"progress",generated:0,total:e,estimatedTime:l(i)});for(const u of f){console.log("Generating ".concat(u.count," puzzles of difficulty ").concat(u.difficultyKey));for(let t=0;t<u.count;t++){const t=r(u.settings.removals);t&&c.push({puzzle:t.puzzle,solution:t.solution,difficulty:u.settings.level}),i-=u.settings.estimatedTime,self.postMessage({type:"progress",generated:c.length,total:e,estimatedTime:l(Math.max(0,i))})}}self.postMessage({type:"result",puzzles:c})}})();
//# sourceMappingURL=400.83c07030.chunk.js.map